plugins {
    id 'java'
    id 'application'
    //id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'com.gradleup.shadow' version '8.3.6'
}

// artifact properties
group = 'com.example'
version = '1.0'
description = "Flink Test"
mainClassName = 'com.example.flink.job.CleanProfilesJob'



ext {
    javaVersion = '17'
    flinkVersion = '1.20.0'
    kafkaClientVersion = '3.9.0'
    flinkConnectorKafkaVersion = '3.4.0-1.20'
    scalaBinaryVersion = '_2.12'
    slf4jVersion = '1.7.36'
    log4jVersion = '2.24.1'
}

sourceCompatibility = javaVersion
targetCompatibility = javaVersion
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

applicationDefaultJvmArgs = ["-Dlog4j.configurationFile=log4j2.properties"]

repositories {
    mavenCentral()
    maven { url "https://packages.confluent.io/maven/" }   // ⬅️ 추가
    maven {
        url "https://repository.apache.org/content/repositories/snapshots"
        mavenContent { snapshotsOnly() }
    }
}

configurations {
    // Only artifacts in this configuration will be bundled into the Shadow JAR
    flinkShadowJar
}


dependencies {
    // 클러스터 제공
    compileOnly "org.apache.flink:flink-streaming-java:${flinkVersion}"
    compileOnly "org.apache.flink:flink-table-api-java:${flinkVersion}"
    compileOnly "org.apache.flink:flink-table-api-java-bridge:${flinkVersion}"
    compileOnly "org.apache.flink:flink-clients:${flinkVersion}"
    //compileOnly "org.apache.flink:flink-parent:${flinkVersion}"
    compileOnly "org.apache.flink:flink-table-runtime:${flinkVersion}"
    compileOnly "org.apache.flink:flink-table-planner-loader:${flinkVersion}"

    // 로깅(클러스터 제공 가정)
    compileOnly "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"
    compileOnly "org.apache.logging.log4j:log4j-api:${log4jVersion}"
    compileOnly "org.apache.logging.log4j:log4j-core:${log4jVersion}"

    // 애플리케이션에 포함해야 하는 것들 (Shadow JAR)
    flinkShadowJar "org.apache.flink:flink-connector-kafka:${flinkConnectorKafkaVersion}"
    flinkShadowJar "com.fasterxml.jackson.core:jackson-databind:2.17.2"
//    flinkShadowJar "org.apache.kafka:kafka-clients:${kafkaClientVersion}"
    flinkShadowJar "io.confluent:kafka-oauth-client:7.4.0"
    flinkShadowJar "io.confluent:kafka-client-plugins:7.4.0"
    // Prometheus 리포터
    runtimeOnly "org.apache.flink:flink-metrics-prometheus:${flinkVersion}"

    // YAML 파싱 (스프링 안 쓸 때)
    implementation 'org.yaml:snakeyaml:2.2'

}



application {
    // 실행 클래스 지정 (필요한 클래스로 변경)
    mainClass = 'com.example.flink.job.CleanProfilesJob'
}

sourceSets {
    main.compileClasspath += configurations.flinkShadowJar
    main.runtimeClasspath += configurations.flinkShadowJar
    test.compileClasspath += configurations.flinkShadowJar
    test.runtimeClasspath += configurations.flinkShadowJar
    javadoc.classpath += configurations.flinkShadowJar
}

run.classpath = sourceSets.main.runtimeClasspath

jar {
    manifest{
        attributes 'Built-By': System.getProperty('user.name'),
                'Build-Jdk': System.getProperty('java.version')
    }
}

// Shadow JAR 설정: flinkShadowJar 구성만 포함
shadowJar {
    configurations = [project.configurations.flinkShadowJar]
    archiveClassifier.set('') // -all 같은 분류자 제거
}
